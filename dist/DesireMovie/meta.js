"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getMeta=void 0;const headers={Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7","Cache-Control":"no-store","Accept-Language":"en-US,en;q=0.9",DNT:"1","sec-ch-ua":'"Not_A Brand";v="8", "Chromium";v="120", "Microsoft Edge";v="120"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"Windows"',"Sec-Fetch-Dest":"document","Sec-Fetch-Mode":"navigate","Sec-Fetch-Site":"none","Sec-Fetch-User":"?1",Cookie:"xla=s4t; _ga=GA1.1.1081149560.1756378968; _ga_BLZGKYN5PF=GS2.1.s1756378968$o1$g1$t1756378984$j44$l0$h0","Upgrade-Insecure-Requests":"1","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0"},getMeta=async function({link:link,providerContext:providerContext}){const{axios:axios,cheerio:cheerio}=providerContext,url=link,baseUrl=url.split("/").slice(0,3).join("/"),emptyResult={title:"",synopsis:"",image:"",imdbId:"",type:"movie",linkList:[]};try{const response=await axios.get(url,{headers:{...headers,Referer:baseUrl}}),$=cheerio.load(response.data),infoContainer=$(".entry-content").first(),result={title:"",synopsis:"",image:"",imdbId:"",type:"movie",linkList:[]},rawTitle=$("h1").text().trim(),isSeries=/Season \d+|EP \d+|S\d+/i.test(rawTitle)||infoContainer.find("span:contains('EP ')").length>0;if(result.type=isSeries?"series":"movie",isSeries){let cleanTitle=rawTitle.replace(/\[Season \d+\]/i,"").trim();cleanTitle=cleanTitle.split(/ Hindi WEB-HDRip| WEB-HDRip/i)[0].trim(),cleanTitle=cleanTitle.replace(/\[EP \d+ TO \d+ ADDED\]/i,"").trim(),result.title=cleanTitle||"Unknown Series"}else{const titleMatch=rawTitle.match(/^(.*?)\s*\((\d{4})\)/);result.title=titleMatch?titleMatch[1].trim():"Unknown Movie"}let image=infoContainer.find("img[src]").eq(1).attr("src")||"";(image.includes("no-thumbnail")||image.includes("placeholder"))&&(image=""),result.image=image,result.imdbId="";let synopsis="";const plotHeading=infoContainer.find("span:contains('Plot:')").closest("p");if(plotHeading.length){synopsis=plotHeading.text().trim().replace(/Plot:\s*/,"").trim()}result.synopsis=synopsis;const links=[];if(result.linkList=links,isSeries&&rawTitle.includes("EP ")){let currentEpisodeRangeTitle="Batch Links";infoContainer.children().each((i,el)=>{var _a;const $el=$(el),elTag=$el.get(0).tagName.toLowerCase();if("p"===elTag&&$el.find('span:contains("EP ")').length&&$el.find("strong").length)currentEpisodeRangeTitle=$el.find('span:contains("EP ")').closest("p").text().trim();else if("p"===elTag&&$el.find('span:contains("GB"), span:contains("MB")').length){const qualityAndSizeText=$el.find("span").text().trim();if(!((null===(_a=qualityAndSizeText.match(/\d+p/))||void 0===_a?void 0:_a[0])||""))return;const downloadLink=$el.next("p").find("a[href]").first().attr("href");if(downloadLink){let finalLinkEntry,existingLinkEntry=links.find(l=>l.title===currentEpisodeRangeTitle);if(existingLinkEntry)finalLinkEntry=existingLinkEntry;else{const newEntry={title:currentEpisodeRangeTitle,directLinks:[],episodesLink:""};links.push(newEntry),finalLinkEntry=newEntry}finalLinkEntry.episodesLink||(finalLinkEntry.episodesLink=downloadLink),finalLinkEntry.directLinks.push({title:qualityAndSizeText,link:downloadLink,type:"series"})}}})}else if(isSeries)infoContainer.find("p span:contains('EP ')").each((index,element)=>{const el=$(element),episodeText=el.text().trim(),episodeLinksContainer=el.closest("p").nextAll("h4").first();if(episodeLinksContainer.length){const directLinks=[];let hasLinks=!1;if(episodeLinksContainer.find("a[href]").each((i,linkElement)=>{const linkEl=$(linkElement),quality=linkEl.text().trim().replace(" ",""),downloadLink=linkEl.attr("href");downloadLink&&quality&&"480p"!==quality&&(hasLinks=!0,directLinks.push({title:quality,link:downloadLink,type:"series"}))}),hasLinks){const highestQualityLink=directLinks.reduce((prev,current)=>{var _a,_b;const prevQuality=parseInt((null===(_a=prev.title.match(/(\d+)/))||void 0===_a?void 0:_a[0])||"0",10);return parseInt((null===(_b=current.title.match(/(\d+)/))||void 0===_b?void 0:_b[0])||"0",10)>prevQuality?current:prev},directLinks[0]);links.push({title:`${episodeText} (${highestQualityLink.title})`,quality:"Multi-Quality",episodesLink:directLinks[0].link,directLinks:directLinks})}}});else{let currentVersionTitle="Movie Links";infoContainer.children().each((i,el)=>{const $el=$(el),elTag=$el.get(0).tagName.toLowerCase(),elText=$el.text().trim();if("h4"===elTag&&elText.includes("Version"))currentVersionTitle=elText,currentVersionTitle=currentVersionTitle.replace(/\[.*?\]/gi,"").replace(/\s*Untoched Version/gi," ").replace(/\s*Encoded Version/gi," ").replace(/\s*DS4K/gi," ").trim(),currentVersionTitle=currentVersionTitle||"Movie Links";else if("p"===elTag&&$el.find('span:contains("GB"), span:contains("MB")').length){const qualityAndSizeText=$el.find("span").text().trim(),qualityMatch=qualityAndSizeText.match(/(\d+)p/i);if(0===(qualityMatch?parseInt(qualityMatch[1],10):0))return;const downloadLink=$el.next("p").find("a:contains('GD & DOWNLOAD')").first().attr("href");if(downloadLink){let finalLinkEntry,existingLinkEntry=links.find(l=>l.title.startsWith(currentVersionTitle));if(existingLinkEntry)finalLinkEntry=existingLinkEntry;else{const newEntry={title:currentVersionTitle,directLinks:[],episodesLink:""};links.push(newEntry),finalLinkEntry=newEntry}finalLinkEntry.directLinks.push({title:`${qualityAndSizeText}`,link:downloadLink,type:"movie"})}}}),links.forEach(linkEntry=>{if(!linkEntry.directLinks||0===linkEntry.directLinks.length)return;let highestQuality=0,lowestQuality=9999,highestQualityTitle="";if(linkEntry.directLinks.forEach(directLink=>{const match=directLink.title.match(/(\d+)p/i),quality=match?parseInt(match[1],10):0;quality>0&&(quality>highestQuality&&(highestQuality=quality,highestQualityTitle=directLink.title),lowestQuality=Math.min(lowestQuality,quality))}),highestQuality>0){let qualityText="",highestQualityDisplayStringMatch=highestQualityTitle.match(/(\d+p.*?\[.*?\])/i),displayString=highestQualityDisplayStringMatch?highestQualityDisplayStringMatch[1]:`${highestQuality}p`;if(highestQuality===lowestQuality)qualityText=` (${displayString})`;else{qualityText=` (${displayString} Range to ${9999===lowestQuality?"??p":`${lowestQuality}p`})`}(linkEntry.title.startsWith("Movie Links")||linkEntry.title.includes("Version"))&&(linkEntry.title+=qualityText)}})}return result}catch(err){return emptyResult}};exports.getMeta=getMeta;